const express = require('express');\nconst multer = require('multer');\nconst ffmpeg = require('fluent-ffmpeg');\nconst fs = require('fs');\nconst path = require('path');\nconst Jimp = require('jimp');\n\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('video'), async (req, res) => {\n  const videoPath = req.file.path;\n  console.log('Video uploaded and saved to', videoPath);\n  // Placeholder for video processing logic\n  res.json({ message: 'Video processing started.' });\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => console.log('Server listening on port ' + PORT));
const express = require('express');\nconst multer = require('multer');\nconst ffmpeg = require('fluent-ffmpeg');\nconst fs = require('fs');\nconst path = require('path');\nconst Jimp = require('jimp');\nconst upload = multer({ dest: 'uploads/' });\nconst app = express();\n\napp.post('/upload', upload.single('video'), (req, res) => {\n  const videoPath = req.file.path;\n  const videoFileName = req.file.filename;\n  const outputDirectory = path.join(__dirname, 'output', videoFileName);\n  fs.mkdirSync(outputDirectory, { recursive: true });\n  let frameNumber = 0;\n\n  ffmpeg(videoPath)\n    .on('filenames', (filenames) => {\n      console.log('Will generate ' + filenames.join(', '));\n    })\n    .on('end', () => {\n      console.log('Screenshots taken');\n    })\n    .on('frame', async (frame) => {\n      // Increment frame number\n      frameNumber++;\n      const framePath = path.join(outputDirectory, );\n      // Crop the frame into four quadrants and save each quadrant\n      const image = await Jimp.read(framePath);\n      const { width, height } = image.bitmap;\n\n      // Define the cropping points\n      const cropWidth = width / 2;\n      const cropHeight = height / 2;\n      const quadrantNames = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\n      const quadrantCoords = [\n        { x: 0, y: 0 }, // top-left\n        { x: cropWidth, y: 0 }, // top-right\n        { x: 0, y: cropHeight }, // bottom-left\n        { x: cropWidth, y: cropHeight } // bottom-right\n      ];\n\n      quadrantCoords.forEach((coords, index) => {\n        image\n          .clone() // Clone the image before cropping\n          .crop(coords.x, coords.y, cropWidth, cropHeight)\n          .write(path.join(outputDirectory, ));\n      });\n    })\n    .screenshots({\n      // Take a screenshot every 2 seconds\n      timemarks: [...Array(Math.floor(ffmpeg.ffprobeSync(videoPath).format.duration) / 2).keys()].map(t => t * 2),\n      folder: outputDirectory,\n      filename: 'frame-%s.png'\n    });\n\n  res.send('Frame extraction started');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log());
